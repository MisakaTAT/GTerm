// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/OpenToolkitLab/GTerm/backend/dal/model"
)

func newConnectionGroup(db *gorm.DB, opts ...gen.DOOption) connectionGroup {
	_connectionGroup := connectionGroup{}

	_connectionGroup.connectionGroupDo.UseDB(db, opts...)
	_connectionGroup.connectionGroupDo.UseModel(&model.ConnectionGroup{})

	tableName := _connectionGroup.connectionGroupDo.TableName()
	_connectionGroup.ALL = field.NewAsterisk(tableName)
	_connectionGroup.ID = field.NewUint(tableName, "id")
	_connectionGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_connectionGroup.UpdatedAt = field.NewTime(tableName, "updated_at")
	_connectionGroup.DeletedAt = field.NewField(tableName, "deleted_at")
	_connectionGroup.Label = field.NewString(tableName, "label")
	_connectionGroup.Connections = connectionGroupHasManyConnections{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Connections", "model.Connection"),
		Credential: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Connections.Credential", "model.Credential"),
		},
	}

	_connectionGroup.fillFieldMap()

	return _connectionGroup
}

type connectionGroup struct {
	connectionGroupDo connectionGroupDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Label       field.String
	Connections connectionGroupHasManyConnections

	fieldMap map[string]field.Expr
}

func (c connectionGroup) Table(newTableName string) *connectionGroup {
	c.connectionGroupDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c connectionGroup) As(alias string) *connectionGroup {
	c.connectionGroupDo.DO = *(c.connectionGroupDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *connectionGroup) updateTableName(table string) *connectionGroup {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Label = field.NewString(table, "label")

	c.fillFieldMap()

	return c
}

func (c *connectionGroup) WithContext(ctx context.Context) IConnectionGroupDo {
	return c.connectionGroupDo.WithContext(ctx)
}

func (c connectionGroup) TableName() string { return c.connectionGroupDo.TableName() }

func (c connectionGroup) Alias() string { return c.connectionGroupDo.Alias() }

func (c connectionGroup) Columns(cols ...field.Expr) gen.Columns {
	return c.connectionGroupDo.Columns(cols...)
}

func (c *connectionGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *connectionGroup) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["label"] = c.Label

}

func (c connectionGroup) clone(db *gorm.DB) connectionGroup {
	c.connectionGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c connectionGroup) replaceDB(db *gorm.DB) connectionGroup {
	c.connectionGroupDo.ReplaceDB(db)
	return c
}

type connectionGroupHasManyConnections struct {
	db *gorm.DB

	field.RelationField

	Credential struct {
		field.RelationField
	}
}

func (a connectionGroupHasManyConnections) Where(conds ...field.Expr) *connectionGroupHasManyConnections {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a connectionGroupHasManyConnections) WithContext(ctx context.Context) *connectionGroupHasManyConnections {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a connectionGroupHasManyConnections) Session(session *gorm.Session) *connectionGroupHasManyConnections {
	a.db = a.db.Session(session)
	return &a
}

func (a connectionGroupHasManyConnections) Model(m *model.ConnectionGroup) *connectionGroupHasManyConnectionsTx {
	return &connectionGroupHasManyConnectionsTx{a.db.Model(m).Association(a.Name())}
}

type connectionGroupHasManyConnectionsTx struct{ tx *gorm.Association }

func (a connectionGroupHasManyConnectionsTx) Find() (result []*model.Connection, err error) {
	return result, a.tx.Find(&result)
}

func (a connectionGroupHasManyConnectionsTx) Append(values ...*model.Connection) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a connectionGroupHasManyConnectionsTx) Replace(values ...*model.Connection) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a connectionGroupHasManyConnectionsTx) Delete(values ...*model.Connection) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a connectionGroupHasManyConnectionsTx) Clear() error {
	return a.tx.Clear()
}

func (a connectionGroupHasManyConnectionsTx) Count() int64 {
	return a.tx.Count()
}

type connectionGroupDo struct{ gen.DO }

type IConnectionGroupDo interface {
	gen.SubQuery
	Debug() IConnectionGroupDo
	WithContext(ctx context.Context) IConnectionGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConnectionGroupDo
	WriteDB() IConnectionGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConnectionGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConnectionGroupDo
	Not(conds ...gen.Condition) IConnectionGroupDo
	Or(conds ...gen.Condition) IConnectionGroupDo
	Select(conds ...field.Expr) IConnectionGroupDo
	Where(conds ...gen.Condition) IConnectionGroupDo
	Order(conds ...field.Expr) IConnectionGroupDo
	Distinct(cols ...field.Expr) IConnectionGroupDo
	Omit(cols ...field.Expr) IConnectionGroupDo
	Join(table schema.Tabler, on ...field.Expr) IConnectionGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConnectionGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConnectionGroupDo
	Group(cols ...field.Expr) IConnectionGroupDo
	Having(conds ...gen.Condition) IConnectionGroupDo
	Limit(limit int) IConnectionGroupDo
	Offset(offset int) IConnectionGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConnectionGroupDo
	Unscoped() IConnectionGroupDo
	Create(values ...*model.ConnectionGroup) error
	CreateInBatches(values []*model.ConnectionGroup, batchSize int) error
	Save(values ...*model.ConnectionGroup) error
	First() (*model.ConnectionGroup, error)
	Take() (*model.ConnectionGroup, error)
	Last() (*model.ConnectionGroup, error)
	Find() ([]*model.ConnectionGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConnectionGroup, err error)
	FindInBatches(result *[]*model.ConnectionGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ConnectionGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConnectionGroupDo
	Assign(attrs ...field.AssignExpr) IConnectionGroupDo
	Joins(fields ...field.RelationField) IConnectionGroupDo
	Preload(fields ...field.RelationField) IConnectionGroupDo
	FirstOrInit() (*model.ConnectionGroup, error)
	FirstOrCreate() (*model.ConnectionGroup, error)
	FindByPage(offset int, limit int) (result []*model.ConnectionGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConnectionGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c connectionGroupDo) Debug() IConnectionGroupDo {
	return c.withDO(c.DO.Debug())
}

func (c connectionGroupDo) WithContext(ctx context.Context) IConnectionGroupDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c connectionGroupDo) ReadDB() IConnectionGroupDo {
	return c.Clauses(dbresolver.Read)
}

func (c connectionGroupDo) WriteDB() IConnectionGroupDo {
	return c.Clauses(dbresolver.Write)
}

func (c connectionGroupDo) Session(config *gorm.Session) IConnectionGroupDo {
	return c.withDO(c.DO.Session(config))
}

func (c connectionGroupDo) Clauses(conds ...clause.Expression) IConnectionGroupDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c connectionGroupDo) Returning(value interface{}, columns ...string) IConnectionGroupDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c connectionGroupDo) Not(conds ...gen.Condition) IConnectionGroupDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c connectionGroupDo) Or(conds ...gen.Condition) IConnectionGroupDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c connectionGroupDo) Select(conds ...field.Expr) IConnectionGroupDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c connectionGroupDo) Where(conds ...gen.Condition) IConnectionGroupDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c connectionGroupDo) Order(conds ...field.Expr) IConnectionGroupDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c connectionGroupDo) Distinct(cols ...field.Expr) IConnectionGroupDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c connectionGroupDo) Omit(cols ...field.Expr) IConnectionGroupDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c connectionGroupDo) Join(table schema.Tabler, on ...field.Expr) IConnectionGroupDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c connectionGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConnectionGroupDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c connectionGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IConnectionGroupDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c connectionGroupDo) Group(cols ...field.Expr) IConnectionGroupDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c connectionGroupDo) Having(conds ...gen.Condition) IConnectionGroupDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c connectionGroupDo) Limit(limit int) IConnectionGroupDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c connectionGroupDo) Offset(offset int) IConnectionGroupDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c connectionGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConnectionGroupDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c connectionGroupDo) Unscoped() IConnectionGroupDo {
	return c.withDO(c.DO.Unscoped())
}

func (c connectionGroupDo) Create(values ...*model.ConnectionGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c connectionGroupDo) CreateInBatches(values []*model.ConnectionGroup, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c connectionGroupDo) Save(values ...*model.ConnectionGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c connectionGroupDo) First() (*model.ConnectionGroup, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectionGroup), nil
	}
}

func (c connectionGroupDo) Take() (*model.ConnectionGroup, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectionGroup), nil
	}
}

func (c connectionGroupDo) Last() (*model.ConnectionGroup, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectionGroup), nil
	}
}

func (c connectionGroupDo) Find() ([]*model.ConnectionGroup, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConnectionGroup), err
}

func (c connectionGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConnectionGroup, err error) {
	buf := make([]*model.ConnectionGroup, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c connectionGroupDo) FindInBatches(result *[]*model.ConnectionGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c connectionGroupDo) Attrs(attrs ...field.AssignExpr) IConnectionGroupDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c connectionGroupDo) Assign(attrs ...field.AssignExpr) IConnectionGroupDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c connectionGroupDo) Joins(fields ...field.RelationField) IConnectionGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c connectionGroupDo) Preload(fields ...field.RelationField) IConnectionGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c connectionGroupDo) FirstOrInit() (*model.ConnectionGroup, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectionGroup), nil
	}
}

func (c connectionGroupDo) FirstOrCreate() (*model.ConnectionGroup, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectionGroup), nil
	}
}

func (c connectionGroupDo) FindByPage(offset int, limit int) (result []*model.ConnectionGroup, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c connectionGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c connectionGroupDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c connectionGroupDo) Delete(models ...*model.ConnectionGroup) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *connectionGroupDo) withDO(do gen.Dao) *connectionGroupDo {
	c.DO = *do.(*gen.DO)
	return c
}
