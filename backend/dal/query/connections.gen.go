// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/OpenToolkitLab/GTerm/backend/dal/model"
)

func newConnection(db *gorm.DB, opts ...gen.DOOption) connection {
	_connection := connection{}

	_connection.connectionDo.UseDB(db, opts...)
	_connection.connectionDo.UseModel(&model.Connection{})

	tableName := _connection.connectionDo.TableName()
	_connection.ALL = field.NewAsterisk(tableName)
	_connection.ID = field.NewUint(tableName, "id")
	_connection.CreatedAt = field.NewTime(tableName, "created_at")
	_connection.UpdatedAt = field.NewTime(tableName, "updated_at")
	_connection.DeletedAt = field.NewField(tableName, "deleted_at")
	_connection.Label = field.NewString(tableName, "label")
	_connection.Address = field.NewString(tableName, "address")
	_connection.Port = field.NewUint32(tableName, "port")
	_connection.Comment = field.NewString(tableName, "comment")
	_connection.CredentialID = field.NewUint(tableName, "credential_id")
	_connection.ConnectionGroupID = field.NewUint(tableName, "connection_group_id")
	_connection.Credential = connectionBelongsToCredential{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Credential", "model.Credential"),
	}

	_connection.fillFieldMap()

	return _connection
}

type connection struct {
	connectionDo connectionDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	Label             field.String
	Address           field.String
	Port              field.Uint32
	Comment           field.String
	CredentialID      field.Uint
	ConnectionGroupID field.Uint
	Credential        connectionBelongsToCredential

	fieldMap map[string]field.Expr
}

func (c connection) Table(newTableName string) *connection {
	c.connectionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c connection) As(alias string) *connection {
	c.connectionDo.DO = *(c.connectionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *connection) updateTableName(table string) *connection {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Label = field.NewString(table, "label")
	c.Address = field.NewString(table, "address")
	c.Port = field.NewUint32(table, "port")
	c.Comment = field.NewString(table, "comment")
	c.CredentialID = field.NewUint(table, "credential_id")
	c.ConnectionGroupID = field.NewUint(table, "connection_group_id")

	c.fillFieldMap()

	return c
}

func (c *connection) WithContext(ctx context.Context) IConnectionDo {
	return c.connectionDo.WithContext(ctx)
}

func (c connection) TableName() string { return c.connectionDo.TableName() }

func (c connection) Alias() string { return c.connectionDo.Alias() }

func (c connection) Columns(cols ...field.Expr) gen.Columns { return c.connectionDo.Columns(cols...) }

func (c *connection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *connection) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["label"] = c.Label
	c.fieldMap["address"] = c.Address
	c.fieldMap["port"] = c.Port
	c.fieldMap["comment"] = c.Comment
	c.fieldMap["credential_id"] = c.CredentialID
	c.fieldMap["connection_group_id"] = c.ConnectionGroupID

}

func (c connection) clone(db *gorm.DB) connection {
	c.connectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c connection) replaceDB(db *gorm.DB) connection {
	c.connectionDo.ReplaceDB(db)
	return c
}

type connectionBelongsToCredential struct {
	db *gorm.DB

	field.RelationField
}

func (a connectionBelongsToCredential) Where(conds ...field.Expr) *connectionBelongsToCredential {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a connectionBelongsToCredential) WithContext(ctx context.Context) *connectionBelongsToCredential {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a connectionBelongsToCredential) Session(session *gorm.Session) *connectionBelongsToCredential {
	a.db = a.db.Session(session)
	return &a
}

func (a connectionBelongsToCredential) Model(m *model.Connection) *connectionBelongsToCredentialTx {
	return &connectionBelongsToCredentialTx{a.db.Model(m).Association(a.Name())}
}

type connectionBelongsToCredentialTx struct{ tx *gorm.Association }

func (a connectionBelongsToCredentialTx) Find() (result *model.Credential, err error) {
	return result, a.tx.Find(&result)
}

func (a connectionBelongsToCredentialTx) Append(values ...*model.Credential) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a connectionBelongsToCredentialTx) Replace(values ...*model.Credential) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a connectionBelongsToCredentialTx) Delete(values ...*model.Credential) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a connectionBelongsToCredentialTx) Clear() error {
	return a.tx.Clear()
}

func (a connectionBelongsToCredentialTx) Count() int64 {
	return a.tx.Count()
}

type connectionDo struct{ gen.DO }

type IConnectionDo interface {
	gen.SubQuery
	Debug() IConnectionDo
	WithContext(ctx context.Context) IConnectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConnectionDo
	WriteDB() IConnectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConnectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConnectionDo
	Not(conds ...gen.Condition) IConnectionDo
	Or(conds ...gen.Condition) IConnectionDo
	Select(conds ...field.Expr) IConnectionDo
	Where(conds ...gen.Condition) IConnectionDo
	Order(conds ...field.Expr) IConnectionDo
	Distinct(cols ...field.Expr) IConnectionDo
	Omit(cols ...field.Expr) IConnectionDo
	Join(table schema.Tabler, on ...field.Expr) IConnectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConnectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConnectionDo
	Group(cols ...field.Expr) IConnectionDo
	Having(conds ...gen.Condition) IConnectionDo
	Limit(limit int) IConnectionDo
	Offset(offset int) IConnectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConnectionDo
	Unscoped() IConnectionDo
	Create(values ...*model.Connection) error
	CreateInBatches(values []*model.Connection, batchSize int) error
	Save(values ...*model.Connection) error
	First() (*model.Connection, error)
	Take() (*model.Connection, error)
	Last() (*model.Connection, error)
	Find() ([]*model.Connection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Connection, err error)
	FindInBatches(result *[]*model.Connection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Connection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConnectionDo
	Assign(attrs ...field.AssignExpr) IConnectionDo
	Joins(fields ...field.RelationField) IConnectionDo
	Preload(fields ...field.RelationField) IConnectionDo
	FirstOrInit() (*model.Connection, error)
	FirstOrCreate() (*model.Connection, error)
	FindByPage(offset int, limit int) (result []*model.Connection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConnectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c connectionDo) Debug() IConnectionDo {
	return c.withDO(c.DO.Debug())
}

func (c connectionDo) WithContext(ctx context.Context) IConnectionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c connectionDo) ReadDB() IConnectionDo {
	return c.Clauses(dbresolver.Read)
}

func (c connectionDo) WriteDB() IConnectionDo {
	return c.Clauses(dbresolver.Write)
}

func (c connectionDo) Session(config *gorm.Session) IConnectionDo {
	return c.withDO(c.DO.Session(config))
}

func (c connectionDo) Clauses(conds ...clause.Expression) IConnectionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c connectionDo) Returning(value interface{}, columns ...string) IConnectionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c connectionDo) Not(conds ...gen.Condition) IConnectionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c connectionDo) Or(conds ...gen.Condition) IConnectionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c connectionDo) Select(conds ...field.Expr) IConnectionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c connectionDo) Where(conds ...gen.Condition) IConnectionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c connectionDo) Order(conds ...field.Expr) IConnectionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c connectionDo) Distinct(cols ...field.Expr) IConnectionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c connectionDo) Omit(cols ...field.Expr) IConnectionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c connectionDo) Join(table schema.Tabler, on ...field.Expr) IConnectionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c connectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConnectionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c connectionDo) RightJoin(table schema.Tabler, on ...field.Expr) IConnectionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c connectionDo) Group(cols ...field.Expr) IConnectionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c connectionDo) Having(conds ...gen.Condition) IConnectionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c connectionDo) Limit(limit int) IConnectionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c connectionDo) Offset(offset int) IConnectionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c connectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConnectionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c connectionDo) Unscoped() IConnectionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c connectionDo) Create(values ...*model.Connection) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c connectionDo) CreateInBatches(values []*model.Connection, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c connectionDo) Save(values ...*model.Connection) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c connectionDo) First() (*model.Connection, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Connection), nil
	}
}

func (c connectionDo) Take() (*model.Connection, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Connection), nil
	}
}

func (c connectionDo) Last() (*model.Connection, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Connection), nil
	}
}

func (c connectionDo) Find() ([]*model.Connection, error) {
	result, err := c.DO.Find()
	return result.([]*model.Connection), err
}

func (c connectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Connection, err error) {
	buf := make([]*model.Connection, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c connectionDo) FindInBatches(result *[]*model.Connection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c connectionDo) Attrs(attrs ...field.AssignExpr) IConnectionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c connectionDo) Assign(attrs ...field.AssignExpr) IConnectionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c connectionDo) Joins(fields ...field.RelationField) IConnectionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c connectionDo) Preload(fields ...field.RelationField) IConnectionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c connectionDo) FirstOrInit() (*model.Connection, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Connection), nil
	}
}

func (c connectionDo) FirstOrCreate() (*model.Connection, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Connection), nil
	}
}

func (c connectionDo) FindByPage(offset int, limit int) (result []*model.Connection, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c connectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c connectionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c connectionDo) Delete(models ...*model.Connection) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *connectionDo) withDO(do gen.Dao) *connectionDo {
	c.DO = *do.(*gen.DO)
	return c
}
